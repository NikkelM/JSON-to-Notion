{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"title": "JSON to Notion configuration schema",
	"description": "Validates configuration input for the \"JSON to Notion\" script.",
	"type": "object",
	"additionalProperties": false,
	"properties": {
		"$schema": {
			"description": "The JSON schema to use for the configuration file.",
			"type": "string",
			"default": "config.schema.json"
		},
		"notionIntegrationKey": {
			"description": "The secret integration key for your Notion integration. Find it on your integration dashboard after creating a new integration on https://www.notion.so/my-integrations",
			"type": "string",
			"default": ""
		},
		"notionDatabaseId": {
			"description": "The ID of the database you want to run the integration on. You can find the ID in the URL of your database, e.g. https://www.notion.so/myworkspace/your-database-id",
			"type": "string",
			"default": ""
		},
		"notionDataSourceId": {
			"description": "The ID of the data source you want to run the integration on. This is required if you have multiple data sources in your database. You can find the ID under the \"Manage data sources\" menu in the database settings. If you only have one data source (which is the default), you can leave this property empty.",
			"type": "string",
			"default": ""
		},
		"inputFile": {
			"description": "The JSON file to import to Notion.",
			"type": "string",
			"default": "input.json",
			"pattern": ".*.json"
		},
		"skipExisting": {
			"description": "Whether to skip already existing entries in the database. If set to true, the script will only import entries that do not exist in the database yet.",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"enabled": false,
				"jsonKey": "keyInJSON",
				"notionProperty": "ItemId",
				"propertyType": "number"
			},
			"properties": {
				"enabled": {
					"description": "Whether to skip existing entries in the database.",
					"type": "boolean",
					"default": true
				},
				"jsonKey": {
					"description": "The key in the JSON input that should be compared to the value of the \"notionProperty\".",
					"type": "string",
					"default": "keyInJSON"
				},
				"notionProperty": {
					"description": "The name of the field in the Notion database that should be compared to the value of the \"jsonKey\".",
					"type": "string",
					"default": "ItemID"
				},
				"propertyType": {
					"description": "The type of the property used for checking if an entry already exists in the database. Not all property types are supported.",
					"type": "string",
					"default": "rich_text",
					"enum": [
						"rich_text",
						"title",
						"number",
						"select",
						"url"
					]
				}
			},
			"required": [
				"enabled",
				"jsonKey",
				"notionProperty",
				"propertyType"
			]
		},
		"missingInInputPolicy": {
			"description": "Decide what to do with entries in the database that have the given notionProperty set, but do not exist in the input file (i.e., an updated dataset no longer contains this entry). If this key is omitted, no action is taken and such entries are ignored.",
			"type": "object",
			"additionalProperties": false,
			"default": {
				"policy": "noAction",
				"jsonKey": "keyInJSON",
				"notionProperty": "ItemId",
				"propertyType": "number",
				"alertedNotionProperty": "ItemName",
				"alertedPropertyType": "title"
			},
			"properties": {
				"policy": {
					"description": "The action to take when an entry exists in the database whose notionProperty value does not exist in the input file.",
					"type": "string",
					"default": "noAction",
					"oneOf": [
						{
							"const": "noAction",
							"title": "Do nothing. Has the same behaviour as if the \"missingInInputPolicy\" key was omitted."
						},
						{
							"const": "alert",
							"title": "The given alertedNotionProperty of all entries that exist in the database but not in the input file will be logged to a file. If no alertedNotionProperty is given, the notionProperty is used."
						},
						{
							"const": "remove",
							"title": "All entries in the database that do not have a matching entry in the input file will be removed from the database, and the alertedNotionProperty is logged to a file. Please note that Notion only supports archiving pages using the API. You can restore such pages for a limited amount of time."
						}
					]
				},
				"jsonKey": {
					"description": "The key in the JSON input that should be compared to the value of the \"notionProperty\".",
					"type": "string",
					"default": "keyInJSON"
				},
				"notionProperty": {
					"description": "The name of the field in the Notion database that should be compared to the value of the \"jsonKey\".",
					"type": "string",
					"default": "ItemID"
				},
				"propertyType": {
					"description": "The type of the property used for checking if an entry already exists in the database. Not all property types are supported.",
					"type": "string",
					"default": "rich_text",
					"enum": [
						"rich_text",
						"title",
						"number",
						"select",
						"url"
					]
				},
				"alertedNotionProperty": {
					"description": "The name of the field in the Notion database that should be used for logging objects missing in the input file.",
					"type": "string",
					"default": "ItemName"
				},
				"alertedPropertyType": {
					"description": "The type of the property used for the logging. Not all property types are supported.",
					"type": "string",
					"default": "title",
					"enum": [
						"rich_text",
						"title",
						"number",
						"select",
						"url"
					]
				}
			},
			"dependentRequired": {
			  "alertedNotionProperty": ["alertedPropertyType"]
			},
			"required": [
				"policy",
				"jsonKey",
				"notionProperty",
				"propertyType"
			]
		},
		"writeErroredObjectsToFile": {
			"description": "Whether to write the input objects that failed to be imported to Notion to a file. This speeds up the process of cleaning up those errors and trying again.",
			"type": "boolean",
			"default": true
		},
		"propertyMappings": {
			"description": "The mapping of JSON keys to Notion property names. If an existing JSON key is not mapped, it will be ignored.",
			"type": "array",
			"default": [
				{
					"jsonKey": "keyInJson",
					"notionPropertyName": "keyInNotion",
					"notionPropertyType": "rich_text",
					"nestedObjectPolicy": {
						"policy": "useNamedProperty",
						"namedProperty": "nameOfNestedProperty"
					}
				}
			],
			"minItems": 1,
			"items": {
				"description": "A mapping of a JSON key to a Notion property name.",
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"jsonKey": {
						"description": "The JSON key to map to the Notion property.",
						"type": "string",
						"default": "keyInJson"
					},
					"notionPropertyName": {
						"description": "The Notion property name to map to the JSON key.",
						"type": "string",
						"default": "keyInNotion"
					},
					"notionPropertyType": {
						"description": "The type of the Notion property. Note: Not all property types are supported as of now. For \"multi_select\", the input string will be split along \",\" to create multiple entries. Combine this with the \"nestedObjectPolicy\" of \"concatenateProperties\".",
						"type": "string",
						"default": "rich_text",
						"enum": [
							"rich_text",
							"number",
							"select",
							"multi_select",
							"date",
							"title",
							"url",
							"cover",
							"icon"
						]
					},
					"nestedObjectPolicy": {
						"description": "The policy to use when the value of the specified JSON key contains another JSON object. This is useful when the JSON value is an object that contains multiple properties that should be mapped to a single Notion property.",
						"type": "object",
						"default": {
							"policy": "useNamedProperty",
							"namedProperty": "nameOfNestedProperty"
						},
						"additionalProperties": false,
						"properties": {
							"policy": {
								"description": "The policy to use when the value of the specified JSON key contains another JSON object.",
								"type": "string",
								"default": "useNamedProperty",
								"oneOf": [
									{
										"const": "useNamedProperty",
										"title": "Use the value of the property with a specific name as defined by the \"namedProperty\" property in the configuration. If the value of this property is another object, the value of the first child property will be used."
									},
									{
										"const": "concatenateProperties",
										"title": "The values of all properties within the nested property will be concatenated into a single string, with \",\" as a delimiter. If the value of this property is another object, the value of the first child property will be used."
									},
									{
										"const": "usePriorityList",
										"title": "Try to use the value of the property with the highest priority as defined by the \"priorityList\" property in the configuration. If a property with the specified key does not exist, move to the property with the next highest priority. If no matching property is found, the value is interpreted as \"null\". If the value of the chosen property is another object, the value of the first child property will be used."
									}
								]
							},
							"namedProperty": {
								"description": "The name of the property to use when the \"policy\" is set to \"useNamedProperty\".",
								"type": "string",
								"default": "namedProperty"
							},
							"priorityList": {
								"description": "The prioritized list of properties to use when the \"policy\" is set to \"usePriorityList\". The script will use the value of the property with the highest priority.",
								"type": "array",
								"default": [
									"highestPriorityProperty",
									"secondHighestPriorityProperty"
								],
								"minItems": 1,
								"uniqueItems": true
							}
						},
						"if": {
							"properties": {
								"policy": {
									"enum": [
										"usePriorityList"
									]
								}
							}
						},
						"then": {
							"required": [
								"priorityList"
							]
						},
						"else": {
							"if": {
								"properties": {
									"policy": {
										"enum": [
											"useNamedProperty"
										]
									}
								}
							},
							"then": {
								"required": [
									"namedProperty"
								]
							}
						}
					},
					"required": [
						"jsonKey",
						"notionPropertyName",
						"notionPropertyType"
					]
				}
			},
			"required": [
				"notionIntegrationKey",
				"notionDatabaseId",
				"inputFile",
				"inputIsArray",
				"propertyMappings"
			]
		},
		"extraProperties": {
			"description": "Extra properties to add to the Notion database. These properties will be added to every row in the database.",
			"type": "array",
			"default": [
				{
					"notionPropertyName": "Imported by",
					"propertyValue": "Imported using JSON to Notion",
					"notionPropertyType": "rich_text"
				}
			],
			"items": {
				"description": "The column name in Notion and the value that should be added.",
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"notionPropertyName": {
						"description": "The Notion property name to map to the JSON key.",
						"type": "string",
						"default": ""
					},
					"propertyValue": {
						"description": "The value to add to the Notion property.",
						"default": ""
					},
					"notionPropertyType": {
						"description": "The type of the Notion property. Note: Not all property types are supported as of now. Unsupported types that may get supported later on: status, files, checkbox, email, phone number. If you would like one of these supported, please open an Issue on the project's Github page.",
						"type": "string",
						"default": "text",
						"oneOf": [
							{
								"const": "rich_text",
								"title": "Default text property. Type string."
							},
							{
								"const": "number",
								"title": "A simple number. Type number."
							},
							{
								"const": "multi_select",
								"title": "A multi-select property. The input must be an array with entries of the form {\"name\": \"WhatIWantToEnter\"}. Type array."
							},
							{
								"const": "select",
								"title": "A select property. Type string."
							},
							{
								"const": "date",
								"title": "A date. Only start times are supported as of now, and due to Notion's requirements, the date must be in valid ISO 8601 format. Type string."
							},
							{
								"const": "title",
								"title": "The title property of the field. Type string."
							},
							{
								"const": "url",
								"title": "A URL. Type string."
							}
						]
					}
				}
			},
			"required": [
				"notionPropertyName",
				"propertyValue",
				"notionPropertyType"
			]
		}
	},
	"required": [
		"notionIntegrationKey",
		"notionDatabaseId",
		"inputFile",
		"propertyMappings"
	]
}